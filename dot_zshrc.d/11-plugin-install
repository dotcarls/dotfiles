#!/usr/bin/env zsh

load-starter-plugin-list() {
  echo "Creating a zgenom save"
  ZGEN_LOADED=()
  ZGEN_COMPLETIONS=()

  zgenom oh-my-zsh

  # Must load zsh-syntax-highlighting before zsh-history-substring-search
  zgenom load zsh-users/zsh-syntax-highlighting
  zgenom load zsh-users/zsh-history-substring-search

  # Set keystrokes for substring searching
  zmodload zsh/terminfo
  bindkey "$terminfo[kcuu1]" history-substring-search-up
  bindkey "$terminfo[kcud1]" history-substring-search-down

  # Automatically run zgenom update and zgenom selfupdate every 7 days.
  zgenom load unixorn/autoupdate-zgenom

  # macOS helpers. This plugin is smart enough to detect when it isn't running
  # on macOS and not load itself, so you can safely share the same plugin list
  # across macOS and Linux/BSD.
  zgenom load unixorn/tumult.plugin.zsh

  # Warn you when you run a command that you've set an alias for without
  # using the alias.
  zgenom load djui/alias-tips

  # Supercharge your history search with fzf
  zgenom load unixorn/fzf-zsh-plugin

  # Docker fzf completions
  zgenom load sei40kr/zsh-fzf-docker

  # Tom Limoncelli's tooling for storing private information (keys, etc)
  # in a repository securely by encrypting them with gnupg.
  zgenom load StackExchange/blackbox

  # Load oh-my-zsh plugins
  zgenom oh-my-zsh plugins/aws
  zgenom oh-my-zsh plugins/colored-man-pages
  zgenom oh-my-zsh plugins/gitfast
  zgenom oh-my-zsh plugins/rsync
  zgenom oh-my-zsh plugins/screen

  if [ $(uname -a | grep -ci Darwin) = 1 ]; then
    # Load macOS-specific plugins
    zgenom oh-my-zsh plugins/brew
    zgenom oh-my-zsh plugins/osx
  fi

  # Ooh pretty
  zgenom load chrissicool/zsh-256color

  # Load more completion files for zsh from the zsh-lovers github repo.
  zgenom load zsh-users/zsh-completions src

  # Docker completion
  zgenom load srijanshetty/docker-zsh

  # Load me last
  GENCOMPL_FPATH=$HOME/.zsh/complete

  # Very cool plugin that generates zsh completion functions for commands
  # if they have getopt-style help text. It doesn't generate them on the fly,
  # you'll have to explicitly generate a completion, but it's still quite cool.
  zgenom load RobSis/zsh-completion-generator

  # Add Fish-like autosuggestions to your ZSH.
  zgenom load zsh-users/zsh-autosuggestions

  # k is a zsh script / plugin to make directory listings more readable,
  # adding a bit of color and some git status information on files and
  # directories.
  zgenom load supercrabtree/k

  # gallifrey is bae, but p10k is faster
  zgenom load romkatv/powerlevel10k powerlevel10k

  # Save it all to init script.
  zgenom save
}

setup-zgen-repos() {
  load-starter-plugin-list
}

# This comes from https://stackoverflow.com/questions/17878684/best-way-to-get-file-modified-time-in-seconds
# This works on both Linux with GNU fileutils and macOS with BSD stat.

# Naturally BSD/macOS and Linux can't share the same options to stat.
if [[ $(uname | grep -ci -e Darwin -e BSD) = 1 ]]; then

  # macOS version.
  get_file_modification_time() {
    modified_time=$(stat -f %m "$1" 2> /dev/null) || modified_time=0
    echo "${modified_time}"
  }

elif [[ $(uname | grep -ci Linux) = 1 ]]; then

  # Linux version.
  get_file_modification_time() {
    modified_time=$(stat -c %Y "$1" 2> /dev/null) || modified_time=0
    echo "${modified_time}"
  }
fi

# check if there's an init.zsh file for zgen and generate one if not.
if ! zgen saved; then
  setup-zgen-repos
fi

plugin_file=~/.zshrc.d/11-plugin-install
# If .zgen-setup is newer than init.zsh, regenerate init.zsh
if [ $(get_file_modification_time ${plugin_file}) -gt $(get_file_modification_time ~/.zgenom/init.zsh) ]; then
  echo "$(basename ${plugin_file}) updated; creating a new init.zsh from plugin list in ${plugin_file}"
  setup-zgen-repos
fi
unset REAL_ZGEN_SETUP
 